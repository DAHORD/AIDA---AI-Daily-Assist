import os
import random
import string
import requests
import configparser
import psutil
import shutil
import time
import wikipediaapi
import qrcode
import json
from PIL import Image
import pyfiglet
from bs4 import BeautifulSoup
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt
from rich.tree import Tree
from rich.live import Live
from rich.text import Text
from rich.highlighter import ReprHighlighter

# --- Initialisation ---
console = Console()
wiki_wiki = wikipediaapi.Wikipedia('MonAssistantTerminal/1.0', 'fr')
TODO_FILE = "todolist.json"

# --- Fonctions de Configuration et d'Aide ---

def charger_cles_api():
    config = configparser.ConfigParser()
    if not os.path.exists('config.ini'):
        console.print("[bold red]Erreur : Le fichier 'config.ini' est introuvable.[/bold red]")
        return {}
    config.read('config.ini')
    if 'API_KEYS' not in config:
        console.print("[bold red]Erreur : Section [API_KEYS] manquante dans 'config.ini'.[/bold red]")
        return {}
    return config['API_KEYS']

def afficher_aide():
    table = Table(title="üíé Commandes Disponibles v5.0 üíé", style="cyan", header_style="bold magenta")
    table.add_column("Commande (Alias)", justify="right")
    table.add_column("Description")
    
    commandes_aide = {
        "--- Productivit√© ---": "",
        "todo": "Gestionnaire de t√¢ches (add, list, del, clear).",
        "convert": "Convertisseur de devises.",
        "search": "Cherche un texte dans les fichiers d'un dossier.",
        "--- Utilitaires ---": "",
        "tree": "Affiche l'arborescence d'un dossier.",
        "disk": "Montre l'utilisation de l'espace disque.",
        "org": "Organise les fichiers par extension.",
        "sys": "Affiche l'utilisation CPU et RAM.",
        "--- Outils Web ---": "",
        "meteo": "Affiche la m√©t√©o actuelle.",
        "news": "Recherche des actualit√©s.",
        "ip": "Affiche votre IP publique.",
        "shorten (url)": "Raccourcit une URL.",
        "wiki": "Cherche un r√©sum√© sur Wikip√©dia.",
        "def": "Donne la d√©finition d'un mot.",
        "--- Outils Cr√©atifs ---": "",
        "qrcode": "G√©n√®re un QR Code en image (.png).",
        "ascii": "Convertit un texte en art ASCII.",
        "mdp": "G√©n√®re un mot de passe s√©curis√©.",
        "timer": "Lance un compte √† rebours.",
        "blg (joke)": "Raconte une blague par th√®me.",
        "--- G√©n√©ral ---": "",
        "help": "Affiche ce message d'aide.",
        "q (quit, exit)": "Termine le programme."
    }
    
    for cmd, desc in commandes_aide.items():
        if "---" in cmd:
            table.add_row(f"[bold yellow]{cmd}[/bold yellow]", "")
        else:
            table.add_row(f"[bold green]{cmd}[/bold green]", desc)
    console.print(table)

# --- Fonctions de Productivit√© ---

def charger_taches():
    if not os.path.exists(TODO_FILE):
        return []
    try:
        with open(TODO_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def sauvegarder_taches(taches):
    with open(TODO_FILE, 'w', encoding='utf-8') as f:
        json.dump(taches, f, indent=4, ensure_ascii=False)

def _afficher_liste_taches():
    """Helper interne pour afficher la table des t√¢ches."""
    taches = charger_taches()
    table = Table(title="üìù Ma To-Do List", style="green", show_header=True, header_style="bold magenta")
    table.add_column("N¬∞", style="bold cyan", width=4)
    table.add_column("T√¢che", style="white")
    
    if not taches:
        table.add_row("üéâ", "Aucune t√¢che pour le moment. Bravo !")
    else:
        for i, tache in enumerate(taches):
            table.add_row(str(i + 1), tache)
            
    console.print(table)

def gerer_todo(args):
    """Point d'entr√©e pour la gestion des t√¢ches. G√®re les commandes directes et le mode interactif."""

    # --- Gestion des commandes directes (ex: todo add ...) ---
    if args:
        taches = charger_taches()
        action = args[0]
        
        if action == "add":
            if len(args) < 2:
                console.print("[red]Veuillez sp√©cifier une t√¢che √† ajouter.[/red]")
                return
            tache = " ".join(args[1:])
            taches.append(tache)
            sauvegarder_taches(taches)
            console.print(f"[green]‚úÖ T√¢che ajout√©e : '{tache}'[/green]")
        elif action == "list":
            _afficher_liste_taches()
        elif action == "del":
            try:
                index = int(args[1]) - 1
                if 0 <= index < len(taches):
                    tache_supprimee = taches.pop(index)
                    sauvegarder_taches(taches)
                    console.print(f"[red]‚ùå T√¢che supprim√©e : '{tache_supprimee}'[/red]")
                else:
                    console.print("[red]Num√©ro de t√¢che invalide.[/red]")
            except (IndexError, ValueError):
                console.print("[red]Veuillez fournir un num√©ro de t√¢che valide √† supprimer.[/red]")
        elif action == "clear":
            sauvegarder_taches([])
            console.print("[bold red]üóëÔ∏è Toutes les t√¢ches ont √©t√© supprim√©es.[/bold red]")
        else:
            console.print(f"[red]Action '{action}' non reconnue.[/red]")
        return

    # --- Mode interactif (si 'todo' est tap√© seul) ---
    console.print(Panel(
        "Vous √™tes en mode [bold]To-Do[/bold]. Commandes : [cyan]add[/cyan], [cyan]list[/cyan], [cyan]del <n¬∞>[/cyan], [cyan]clear[/cyan], [cyan]exit[/cyan].",
        title="üìù Gestionnaire de T√¢ches",
        border_style="green"
    ))
    
    _afficher_liste_taches()

    while True:
        try:
            entree = Prompt.ask("\n[bold](todo) >>> [/bold]").strip()
            if not entree:
                continue

            parties = entree.split()
            commande = parties[0].lower()
            args_todo = parties[1:]
            
            taches = charger_taches() # Recharger les t√¢ches √† chaque commande

            if commande in ["exit", "q", "back"]:
                console.print("[yellow]Retour au menu principal.[/yellow]")
                break
            elif commande == "add":
                if not args_todo:
                    console.print("[red]Veuillez sp√©cifier une t√¢che √† ajouter.[/red]")
                    continue
                tache = " ".join(args_todo)
                taches.append(tache)
                sauvegarder_taches(taches)
                console.print(f"[green]‚úÖ T√¢che ajout√©e.[/green]")
                _afficher_liste_taches()
            elif commande == "list":
                _afficher_liste_taches()
            elif commande == "del":
                try:
                    index = int(args_todo[0]) - 1
                    if 0 <= index < len(taches):
                        taches.pop(index)
                        sauvegarder_taches(taches)
                        console.print("[red]‚ùå T√¢che supprim√©e.[/red]")
                        _afficher_liste_taches()
                    else:
                        console.print("[red]Num√©ro invalide.[/red]")
                except (IndexError, ValueError):
                    console.print("[red]Usage : del <num√©ro>[/red]")
            elif commande == "clear":
                sauvegarder_taches([])
                console.print("[bold red]üóëÔ∏è Toutes les t√¢ches ont √©t√© supprim√©es.[/bold red]")
                _afficher_liste_taches()
            elif commande == "help":
                 console.print("Commandes : [cyan]add <t√¢che>[/cyan], [cyan]list[/cyan], [cyan]del <n¬∞>[/cyan], [cyan]clear[/cyan], [cyan]exit[/cyan].")
            else:
                console.print("[red]Commande non reconnue. Tapez 'help' pour de l'aide.[/red]")

        except KeyboardInterrupt:
            console.print("\n[yellow]Retour au menu principal.[/yellow]")
            break

def convertir_devises():
    api_keys = charger_cles_api()
    api_key = api_keys.get('exchangerate_api_key')
    if not api_key or "VOTRE_CLE" in api_key:
        console.print("[yellow]Cl√© API pour ExchangeRate non configur√©e dans config.ini.[/yellow]")
        return
    
    try:
        montant = float(Prompt.ask("[cyan]Montant √† convertir[/cyan]"))
        devise_base = Prompt.ask("[cyan]Devise de base (ex: EUR)[/cyan]").upper()
        devise_cible = Prompt.ask("[cyan]Devise cible (ex: USD)[/cyan]").upper()

        url = f"https://v6.exchangerate-api.com/v6/{api_key}/latest/{devise_base}"
        with console.status("[yellow]R√©cup√©ration des taux de change...[/yellow]"):
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
        
        if data['result'] == 'success':
            taux = data['conversion_rates'].get(devise_cible)
            if taux:
                resultat = montant * taux
                console.print(f"[bold green]‚úÖ {montant} {devise_base} = {resultat:.2f} {devise_cible}[/bold green]")
            else:
                console.print(f"[red]Devise cible '{devise_cible}' non trouv√©e.[/red]")
        else:
            console.print(f"[red]Erreur de l'API : {data.get('error-type', 'inconnue')}[/red]")

    except ValueError:
        console.print("[red]Veuillez entrer un montant num√©rique valide.[/red]")
    except requests.exceptions.HTTPError as err:
        console.print(f"[red]Erreur HTTP : {err.response.status_code}. V√©rifiez vos devises ou votre cl√© API.[/red]")
    except requests.exceptions.RequestException as e:
        console.print(f"[red]Erreur de connexion : {e}[/red]")

def rechercher_dans_fichiers():
    terme = Prompt.ask("[cyan]Texte √† rechercher[/cyan]")
    dossier = Prompt.ask("[cyan]Dans quel dossier chercher ?[/cyan]", default=".")
    if not os.path.isdir(dossier):
        console.print(f"[red]Dossier '{dossier}' introuvable.[/red]")
        return

    highlighter = ReprHighlighter()
    compteur = 0
    with console.status(f"[yellow]Recherche de '{terme}'...[/yellow]"):
        for root, _, files in os.walk(dossier):
            for file in files:
                try:
                    path = os.path.join(root, file)
                    with open(path, 'r', encoding='utf-8', errors='ignore') as f:
                        for num_ligne, ligne in enumerate(f, 1):
                            if terme in ligne:
                                if compteur == 0:
                                    console.print("\n[bold green]--- R√©sultats trouv√©s ---[/bold green]")
                                console.print(f"üìÑ [blue]{path}[/blue]:[yellow]{num_ligne}[/yellow]")
                                console.print(highlighter(ligne.strip()))
                                compteur += 1
                except Exception:
                    continue
    if compteur == 0:
        console.print("[yellow]Aucun r√©sultat trouv√©.[/yellow]")

# --- Outils Cr√©atifs & Pratiques ---

def raconter_blague():
    """Raconte une blague en utilisant l'API Blagues-API et en demandant un th√®me."""
    api_keys = charger_cles_api()
    api_key = api_keys.get('blagues_api_key')

    if not api_key or "VOTRE_CLE" in api_key:
        console.print("[bold yellow]Cl√© API pour les blagues non configur√©e dans config.ini.[/bold yellow]")
        console.print("Sauvegarde sur une blague hors ligne :")
        console.print(f"\n[italic]Pourquoi les plongeurs tombent-ils toujours en arri√®re du bateau ?\n... Parce que sinon ils tomberaient dans le bateau.[/italic]")
        return

    themes = {
        "1": ("G√©n√©ral", "global"),
        "2": ("D√©veloppeur", "dev"),
        "3": ("Blond", "blondes"),
        "4": ("Toto", "toto"),
        "5": ("Beauf", "beauf"),
        "6": ("Humour noir", "dark"),
    }

    console.print("\n[bold]Choisissez un th√®me pour la blague :[/bold]")
    for key, (label, _) in themes.items():
        console.print(f"  [cyan]{key}[/cyan] - {label}")
    
    choix_theme = Prompt.ask("[bold]Votre choix[/bold]", choices=themes.keys(), default="1")
    categorie = themes[choix_theme][1]
    
    url = f"https://www.blagues-api.fr/api/type/{categorie}/random"
    headers = {'Authorization': f'Bearer {api_key}'}

    try:
        with console.status("[yellow]Je cherche une bonne blague...[/yellow]"):
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()

        blague = data['joke']
        reponse_blague = data['answer']
        
        console.print(Panel(
            f"[italic cyan]{blague}[/italic cyan]",
            title="Devinette...",
            border_style="blue"
        ))
        
        Prompt.ask("\n[bold](Appuyez sur Entr√©e pour la r√©ponse)[/bold]")
        
        console.print(Panel(
            f"[bold green]{reponse_blague}[/bold green]",
            title="La chute !",
            border_style="green"
        ))

    except requests.exceptions.HTTPError as err:
        if err.response.status_code in [401, 403]:
            console.print("[bold red]Erreur : Cl√© API pour les blagues invalide. V√©rifiez votre config.ini.[/bold red]")
        else:
            console.print(f"[bold red]Erreur HTTP en contactant l'API des blagues : {err}[/bold red]")
    except requests.exceptions.RequestException as e:
        console.print(f"[bold red]Erreur de connexion : {e}[/bold red]")


# --- Utilitaires Fichiers & Syst√®me ---
def afficher_arborescence():
    path_str = Prompt.ask("[cyan]Entrez le chemin du dossier √† inspecter[/cyan]", default=".")
    if not os.path.isdir(path_str):
        console.print(f"[red]Erreur : Le dossier '{path_str}' n'existe pas.[/red]")
        return

    tree = Tree(f"üìÅ [bold blue]{os.path.abspath(path_str)}[/bold blue]")
    try:
        paths = sorted(os.listdir(path_str))
        for path in paths:
            if os.path.isdir(os.path.join(path_str, path)):
                tree.add(f"üìÅ [blue]{path}[/blue]")
            else:
                tree.add(f"üìÑ [green]{path}[/green]")
    except Exception as e:
        console.print(f"[red]Une erreur est survenue : {e}[/red]")
    
    console.print(tree)

def afficher_usage_disque():
    table = Table(title="üíø Utilisation des Disques", style="yellow", header_style="bold blue")
    table.add_column("P√©riph√©rique", justify="left")
    table.add_column("Total", justify="right")
    table.add_column("Utilis√©", justify="right")
    table.add_column("Libre", justify="right")
    table.add_column("Pourcentage", justify="center")

    for part in psutil.disk_partitions():
        if os.name == 'nt' or part.mountpoint == '/' or part.mountpoint.startswith('/System'):
             try:
                usage = psutil.disk_usage(part.mountpoint)
                total = f"{usage.total / (1024**3):.2f} Go"
                used = f"{usage.used / (1024**3):.2f} Go"
                free = f"{usage.free / (1024**3):.2f} Go"
                percent = f"[bold {'red' if usage.percent > 85 else 'green'}]{usage.percent}%[/bold {'red' if usage.percent > 85 else 'green'}]"
                table.add_row(part.mountpoint, total, used, free, percent)
             except (PermissionError, FileNotFoundError):
                 continue
    console.print(table)
    
def organiser_fichiers():
    chemin = Prompt.ask("[cyan]Entrez le chemin du dossier √† organiser[/cyan]")
    if not os.path.isdir(chemin):
        console.print(f"[red]Ce dossier n'existe pas : {chemin}[/red]")
        return

    compteur = 0
    with console.status("[bold green]Organisation en cours...[/bold green]"):
        for fichier in os.listdir(chemin):
            if os.path.isfile(os.path.join(chemin, fichier)):
                extension = fichier.split('.')[-1].lower() if '.' in fichier else 'sans_extension'
                dossier_dest = os.path.join(chemin, extension)
                if not os.path.exists(dossier_dest):
                    os.makedirs(dossier_dest)
                shutil.move(os.path.join(chemin, fichier), os.path.join(dossier_dest, fichier))
                compteur += 1
    
    console.print(f"\n[bold green]‚úÖ {compteur} fichier(s) organis√©(s) avec succ√®s dans '{chemin}' ![/bold green]")


# --- Outils Web & R√©seau ---
def obtenir_meteo():
    # On r√©cup√®re le dictionnaire de cl√©s, puis la cl√© sp√©cifique.
    api_keys = charger_cles_api()
    api_key = api_keys.get('weatherapi_key')

    if not api_key or "VOTRE_CLE" in api_key:
        console.print("[bold yellow]Cl√© API m√©t√©o (WeatherAPI) non configur√©e dans config.ini.[/bold yellow]")
        return

    ville = Prompt.ask("[bold cyan]Entrez le nom de la ville[/bold cyan]", default="La Neuville-Roy")
    url = f"http://api.weatherapi.com/v1/current.json?key={api_key}&q={ville}&lang=fr"

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        panel_content = (
            f"[bold]M√©t√©o pour {data['location']['name']}, {data['location']['country']}[/bold]\n"
            f"Condition : [yellow]{data['current']['condition']['text']}[/yellow]\n"
            f"Temp√©rature : [bold bright_magenta]{data['current']['temp_c']}¬∞C[/bold bright_magenta] (Ressenti : {data['current']['feelslike_c']}¬∞C)\n"
            f"Humidit√© : {data['current']['humidity']}% | Vent : {data['current']['wind_kph']} km/h"
        )
        console.print(Panel(panel_content, title="‚òÄÔ∏è M√©t√©o Fiable", border_style="blue", expand=False))

    except requests.exceptions.HTTPError as err:
        if err.response.status_code in [401, 403]:
            console.print("[bold red]Erreur : Cl√© API invalide. V√©rifiez votre config.ini.[/bold red]")
        elif err.response.status_code == 400:
            console.print(f"[bold red]Ville '{ville}' non trouv√©e ou requ√™te invalide.[/bold red]")
        else:
            console.print(f"[bold red]Erreur HTTP : {err}[/bold red]")
    except requests.exceptions.RequestException as e:
        console.print(f"[bold red]Erreur de connexion : {e}[/bold red]")

def obtenir_actualites():
    api_keys = charger_cles_api()
    api_key = api_keys.get('gnews_api_key')

    if not api_key or "VOTRE_CLE" in api_key:
        console.print("[bold yellow]Cl√© API news (GNews) non configur√©e dans config.ini.[/bold yellow]")
        return

    categories = { "1": ("G√©n√©ral", "general"), "2": ("Monde", "world"), "3": ("France", "nation"), "4": ("Business/√âco", "business"), "5": ("Technologie", "technology"), "6": ("Divertissement", "entertainment"), "7": ("Sport", "sports"), "8": ("Science", "science"), "9": ("Sant√©", "health") }
    console.print("\n[bold]Choisissez une cat√©gorie d'actualit√©s :[/bold]")
    for key, (label, _) in categories.items(): console.print(f"  [cyan]{key}[/cyan] - {label}")

    choix_cat = Prompt.ask("[bold]Votre choix[/bold]", choices=categories.keys(), default="1")
    topic = categories[choix_cat][1]
    keyword = Prompt.ask("\n[bold cyan]Entrez un mot-cl√© (ex: Le Monde, √©cologie) ou laissez vide[/bold cyan]", default="").strip()
    url = f"https://gnews.io/api/v4/top-headlines?lang=fr&country=fr&topic={topic}&token={api_key}"
    if keyword: url += f"&q={keyword}"

    try:
        with console.status("[bold green]Recherche des actualit√©s...[/bold green]"):
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

        if not data.get("articles"):
            console.print("[yellow]Aucun article trouv√© pour ces crit√®res.[/yellow]")
            return

        table = Table(title=f"üì∞ Actualit√©s pour '{categories[choix_cat][0]}' avec le mot-cl√© '{keyword}'", style="yellow")
        table.add_column("N¬∞", style="bold cyan")
        table.add_column("Titre", style="white", no_wrap=False)
        table.add_column("Source", style="green")
        for i, article in enumerate(data["articles"][:10]): table.add_row(str(i + 1), article['title'], article['source']['name'])
        console.print(table)
    except requests.exceptions.HTTPError as err:
        if err.response.status_code in [401, 403]: console.print("[bold red]Erreur : Cl√© API GNews invalide.[/bold red]")
        else: console.print(f"[bold red]Erreur HTTP : {err}[/bold red]")
    except requests.exceptions.RequestException as e: console.print(f"[bold red]Erreur de connexion : {e}[/bold red]")

def raccourcir_url():
    long_url = Prompt.ask("[cyan]Entrez l'URL √† raccourcir[/cyan]")
    if not long_url.startswith(('http://', 'https://')):
        console.print("[red]URL invalide. Doit commencer par http:// ou https://[/red]")
        return
    try:
        response = requests.get(f"http://tinyurl.com/api-create.php?url={long_url}")
        response.raise_for_status()
        console.print(f"üîó URL raccourcie : [bold green]{response.text}[/bold green]")
    except requests.exceptions.RequestException as e:
        console.print(f"[red]Impossible de raccourcir l'URL : {e}[/red]")

def resume_wiki():
    sujet = Prompt.ask("[cyan]Quel sujet cherchez-vous sur Wikip√©dia ?[/cyan]")
    with console.status(f"[bold green]Recherche de '{sujet}'...[/bold green]"):
        page = wiki_wiki.page(sujet)
    
    if not page.exists():
        console.print(f"[red]D√©sol√©, aucune page trouv√©e pour '{sujet}'.[/red]")
        return
    
    panel_content = f"[bold]{page.title}[/bold]\n\n{page.summary[0:500]}..."
    console.print(Panel(panel_content, title="üìñ R√©sum√© Wikip√©dia", border_style="yellow", subtitle=f"[link={page.fullurl}]Lire la suite[/link]"))

def definir_mot():
    mot = Prompt.ask("[bold cyan]Quel mot souhaitez-vous d√©finir ?[/bold cyan]")
    url = f"https://www.larousse.fr/dictionnaires/francais/{mot}"

    try:
        with console.status(f"[yellow]Recherche de '{mot}' sur Larousse...[/yellow]"):
            response = requests.get(url)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'html.parser')

        definition_div = soup.find('ul', {'class': 'Definitions'})

        if definition_div:
            definitions_content = []
            definitions = definition_div.find_all('li', class_='DivisionDefinition')

            for i, definition in enumerate(definitions[:5]):
                for tag in definition.find_all(['span', 'p'], class_=['numDef', 'LibelleSynonyme', 'Synonymes']):
                    tag.decompose()
                
                definition_text = definition.get_text(separator=' ', strip=True)
                example_tag = definition.find('span', class_='ExempleDefinition')
                example_text = ""
                
                if example_tag:
                    example_text = example_tag.get_text(strip=True)
                    definition_text = definition_text.replace(example_text, '').strip()
                if definition_text.endswith(':'):
                    definition_text = definition_text[:-1].strip()

                definitions_content.append(f"[bold green]{i+1}.[/bold green] {definition_text}")
                if example_text:
                    definitions_content.append(f"   [italic red]Exemple : {example_text}[/italic red]\n")
                else:
                    definitions_content.append("")

            if len(definitions) > 5:
                definitions_content.append(f"[yellow]... et {len(definitions) - 5} autre(s) d√©finition(s).[/yellow]")

            console.print(Panel(
                "\n".join(definitions_content), 
                title=f"[bold magenta]D√©finitions pour '{mot}'[/bold magenta]", 
                border_style="bold magenta",
                subtitle=f"[link={url}]Voir plus sur Larousse[/link]"
            ))

        else:
            console.print(f"[bold red]Aucune d√©finition trouv√©e pour le mot '{mot}' sur Larousse.[/bold red]")
    
    except requests.exceptions.RequestException as e:
        console.print(f"[red]Erreur de connexion : {e}[/red]")
    except Exception as e:
        console.print(f"[red]Une erreur inattendue est survenue : {e}[/red]")

def generer_qrcode():
    data = Prompt.ask("[cyan]Entrez le texte ou l'URL pour le QR Code[/cyan]")
    filename = Prompt.ask("[cyan]Nom du fichier de sortie (ex: site_web)[/cyan]", default="qrcode")
    
    qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    
    filepath = f"{filename}.png"
    img.save(filepath)
    console.print(f"[bold green]‚úÖ QR Code sauvegard√© avec succ√®s sous le nom '{filepath}' ![/bold green]")

def art_ascii():
    texte = Prompt.ask("[cyan]Entrez le texte √† convertir[/cyan]")
    police = Prompt.ask("[cyan]Choisissez une police (ex: standard, big, slant, small)[/cyan]", default="standard")
    try:
        ascii_art = pyfiglet.figlet_format(texte, font=police)
        console.print(f"[bold magenta]{ascii_art}[/bold magenta]")
    except pyfiglet.FontNotFound:
        console.print(f"[red]Police '{police}' non trouv√©e. Essayez une autre.[/red]")

def compte_a_rebours():
    try:
        secondes = int(Prompt.ask("[cyan]Entrez la dur√©e en secondes pour le minuteur[/cyan]"))
        with Live(console=console, screen=False, auto_refresh=False) as live:
            for s in range(secondes, -1, -1):
                temps_restant = Text(f"‚è≥ Temps restant : {s} seconde{'s' if s > 1 else ''}", justify="center", style="bold green")
                live.update(Panel(temps_restant, title="Minuteur"), refresh=True)
                time.sleep(1)
        console.print("[bold yellow]‚è∞ Le temps est √©coul√© ![/bold yellow]")

    except ValueError:
        console.print("[red]Veuillez entrer un nombre entier de secondes.[/red]")

def info_systeme():
    cpu = psutil.cpu_percent(interval=1)
    ram = psutil.virtual_memory().percent
    console.print(f"üñ•Ô∏è Utilisation [bold cyan]CPU[/bold cyan] : {cpu}% | [bold magenta]RAM[/bold magenta] : {ram}%")

def mon_ip():
    try:
        ip = requests.get('https://api.ipify.org', timeout=5).text
        console.print(f"üåç Votre IP publique est : [bold green]{ip}[/bold green]")
    except requests.exceptions.RequestException:
        console.print("[bold red]Impossible de r√©cup√©rer l'adresse IP.[/bold red]")

def generer_mdp():
    try:
        longueur = int(Prompt.ask("[bold cyan]Longueur du mot de passe[/bold cyan]", default="16"))
        caracteres = string.ascii_letters + string.digits + string.punctuation
        mdp = ''.join(random.choice(caracteres) for i in range(longueur))
        console.print(f"üîê Mot de passe g√©n√©r√© : [bold green]{mdp}[/bold green]")
    except ValueError:
        console.print("[red]Veuillez entrer un nombre valide.[/red]")

# --- MODIFICATION POUR L'INTEGRATION ---

def process_command(command_line: str, commandes: dict, aliases: dict):
    """
    Traite une seule ligne de commande. 
    Cette fonction est le c≈ìur logique que notre GUI appellera.
    """
    if not command_line: return True # Continue la boucle

    parties = command_line.lower().strip().split()
    commande_base = parties[0]
    args = parties[1:]
    
    commande_resolue = aliases.get(commande_base, commande_base)

    if commande_resolue in ["q", "quit", "exit"]:
        console.print("[bold blue]√Ä bient√¥t ![/bold blue]")
        return False # Arr√™te la boucle
    
    elif commande_resolue in commandes:
        try:
            if commande_resolue in ["todo"]:
                commandes[commande_resolue](args)
            else:
                commandes[commande_resolue]()
        except Exception as e:
            console.print(f"[bold red]Une erreur est survenue dans la commande '{commande_resolue}': {e}[/bold red]")
    else:
        console.print("[bold red]Commande non reconnue. Tapez 'help' pour de l'aide.[/bold red]")
    
    return True # Continue la boucle

def main():
    """Fonction principale pour l'ex√©cution en mode terminal classique."""
    console.print(Panel("[bold green]üöÄ Assistant de Terminal v5.0 - Mode Productivit√© üöÄ[/bold green]", border_style="green"))
    console.print("Tapez '[cyan]help[/cyan]' pour voir la liste des commandes.")
    
    commandes = {
        "todo": gerer_todo, "convert": convertir_devises, "search": rechercher_dans_fichiers,
        "tree": afficher_arborescence, "disk": afficher_usage_disque, "org": organiser_fichiers, "sys": info_systeme,
        "meteo": obtenir_meteo, "news": obtenir_actualites, "ip": mon_ip, "shorten": raccourcir_url, 
        "wiki": resume_wiki, "def": definir_mot, "qrcode": generer_qrcode, "ascii": art_ascii, 
        "mdp": generer_mdp, "timer": compte_a_rebours, "blg": raconter_blague, "help": afficher_aide,
    }
    aliases = { "q": "q", "quit": "q", "exit": "q", "url": "shorten", "joke": "blg" }

    running = True
    while running:
        try:
            user_input = Prompt.ask(">>>")
            running = process_command(user_input, commandes, aliases)
            
        except EOFError: # G√®re Ctrl+D
            running = False
        except KeyboardInterrupt: # G√®re Ctrl+C
            console.print("\n[bold cyan]Fermeture forc√©e...[/bold cyan]")
            running = False

if __name__ == "__main__":
    main()